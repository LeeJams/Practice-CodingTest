/* 
Binary Search or Binary Search Tree 이용

문제 설명
n명이 입국심사를 위해 줄을 서서 기다리고 있습니다. 
각 입국심사대에 있는 심사관마다 심사하는데 걸리는 시간은 다릅니다.

처음에 모든 심사대는 비어있습니다. 한 심사대에서는 동시에 한 명만 심사를 할 수 있습니다. 
가장 앞에 서 있는 사람은 비어 있는 심사대로 가서 심사를 받을 수 있습니다. 
하지만 더 빨리 끝나는 심사대가 있으면 기다렸다가 그곳으로 가서 심사를 받을 수도 있습니다.

모든 사람이 심사를 받는데 걸리는 시간을 최소로 하고 싶습니다.

입국심사를 기다리는 사람 수 n, 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times가 매개변수로 주어질 때, 
모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 return 하도록 solution 함수를 작성해주세요.

제한사항
입국심사를 기다리는 사람은 1명 이상 1,000,000,000명 이하입니다.
각 심사관이 한 명을 심사하는데 걸리는 시간은 1분 이상 1,000,000,000분 이하입니다.
심사관은 1명 이상 100,000명 이하입니다.

입출력 예
n	  times	    return
6	  [7, 10]	  28
*/

/* 
로그 시간 = 이진 탐색
times -> 선형 로그 시간으로 충분히 가능
특정 값을 찾는 것이 아님
찾는 것은 최소 몇 분에서 모든 심사가 끝나는가?
결정 문제 = 이진 탐색 = 파라메트릭 서치 (Parametric Search)

최소 1분에서 10억분 * n 사이
면접관들이 몇 명을 처리하는가?
처리 가능한 입국자 n보다 작다면, 분을 올려야되고, 입국자가 n보다 크다면 분을 낮춰야한다.
면접관이 시간대비 몇 명을 처리할 수 있는가?
시간 / 심사시간 = 심사관 당 처리 가능한 입국자 수
*/
function solution(n, times) {
  let left = 1;
  let right = Math.max(...times) * n;

  while (left <= right) {
    const mid = Math.floor((left + right) / 2);
    // 처리 가능한 입국자 수 sum(시간 / 심사시간)
    const sum = times.reduce((acc, time) => acc + Math.floor(mid / time), 0);

    if (sum < n) {
      left = mid + 1;
    } else if (sum === n) {
      return mid;
    } else {
      right = mid - 1;
    }
  }
  return left;
}

console.log(solution(6, [7, 10])); // 28
console.log(solution(10, [1, 3, 5, 10])); // 28

/* 
먼저 left는 처리에 걸리는 가장 짧은 시간 1분을 나타냅니다. 그리고 right는 입력받은 값 중 가장 오래걸리는 시간을 나타냅니다. 
입출력 예시로 들자면 가장 큰 심사 시간 10 * 기다리는 사람 수 6으로 계산되어 right는 60을 나타냅니다.
mid는 우리가 확인할 시간 값이라고 보시면 됩니다. 우선 입출력 예시로 보면 시작은 30분이 되겠네요 :)
그 밑에 있는 로직 reduce는 mid분 안에 각 심사관이 처리할 수 있는 사람의 수의 합을 계산하기 위한 로직입니다.
예를 들어, 30분이라면 처리 속도가 7인 심사관은 4명, 처리 속도가 10인 심사관은 3명을 처리할 수 있습니다. 
이 경우 그 합이 7이기 때문에 6명을 처리한다면 걸리는 시간을 조금 더 줄일 수 있지 않을까?로 생각할 수 있으니 right를 mid - 1로 줄입니다.
이런 방식으로 걸리는 시간의 최솟값을 찾을 수 있습니다.
*/
